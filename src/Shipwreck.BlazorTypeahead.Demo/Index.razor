@page "/"
@inherits LayoutComponentBase
<div class="container">
    <div class="form-inline">
        <div class="custom-control custom-checkbox">
            <input type="checkbox"
                   class="custom-control-input"
                   id="RemoteSource"
                   @bind="@RemoteSource">
            <label class="custom-control-label"
                   for="RemoteSource">
                Use SourceCallback
            </label>
        </div>
    </div>
    <div>
        @if (_Proxy == null)
        {
            <button class="btn btn-primary"
                    @onclick="@Initialize">
                Initialize
            </button>
        }
        else
        {
            <button class="btn btn-danger"
                    @onclick="@Destroy">
                Destroy
            </button>
        }
    </div>
    <div class="mt-4">
        <input @ref="@element"
               class="form-control"
               type="text"
               autocomplete="off"
               @bind="@query" />
    </div>
</div>

@code
{
    ElementReference element;
    string query;
    private TypeaheadProxy<StateInfo> _Proxy;

    public bool RemoteSource = true;

    [Inject]
    public IJSRuntime JS { get; set; }

    async void Initialize()
    {
        var ops = new TypeaheadOptions<StateInfo>
        {
            Highlighter = (s, q) => $"<span class='text-light bg-dark mr-2'>{s.Postal}</span>{s.Name}",
            DisplayText = s => s.Name,
            AfterSelect = (s) => _Proxy.UpdateElementAsync(text: s.Name + " (AfterSelect)", selectionStart: 0, selectionEnd: int.MaxValue),
        };

        if (RemoteSource)
        {
            ops.SourceCallback = (t, ss, se) =>
            {
                Console.WriteLine("SourceCallback: {0}, {1}, {2}", t, ss, se);
                var lq = (t ?? string.Empty).Trim().ToLower();
                return Task.Delay(500)
                        .ContinueWith(t => (IList<StateInfo>)StateInfo.All
                                            .Where(e => lq.Length == 0
                                                || e.Name.ToLower().IndexOf(lq) >= 0)
                                            .ToList());
            };
        }
        else
        {
            ops.Source = StateInfo.All;
        }

        _Proxy = await JS.TypeaheadAsync(element, ops);
        await _Proxy.FocusAsync();

        StateHasChanged();
    }

    void Destroy()
    {
        _Proxy?.DestroyAsync();
        _Proxy = null;
        StateHasChanged();
    }
}